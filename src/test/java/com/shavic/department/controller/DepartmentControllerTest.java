package com.shavic.department.controller;

import com.shavic.department.entity.Department;
import com.shavic.department.service.DepartmentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.junit.jupiter.api.Assertions.*;

@WebMvcTest(DepartmentController.class)
class DepartmentControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private DepartmentService departmentService;

    private Department outputtedDepartment;

    @BeforeEach
    void setUp() {

//        Output POJO Object
        outputtedDepartment = Department.builder()
                .departmentId(1L)
                .departmentName("Grp IT")
                .departmentHead("Shaviya")
                .departmentRole("IT services")
                .build();

    }

    @Test
    void saveDepartment() throws Exception {

//        Expected Input POJO Object - won't have the ID since that property is AutoGenerated
        Department inputtedDepartment = Department.builder()
                .departmentName("Grp IT")
                .departmentHead("Shaviya")
                .departmentRole("IT services")
                .build();

//        mock the object for persistence during the test
        Mockito.when(departmentService.saveDepartment(inputtedDepartment))
                .thenReturn(outputtedDepartment);

//        use the Autowired final class to make the Endpoint call
        mockMvc.perform(MockMvcRequestBuilders.post("add/department")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\n" +
                        "\t\"departmentName\":\"Grp IT\",\n" +
                        "\t\"departmentHead\":\"Shaviya\",\n" +
                        "\t\"departmentRole\":\"IT services\",\n" +
                        "}"))
                .andExpect(MockMvcResultMatchers.status().isOk());

    }

    @Test
    void fetchDepartmentById() {
    }

}